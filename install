#!/usr/bin/env bash
#
# This script installs various applications and symlinks configuration files

source ./helpers.sh

ROOT_DIR=$(pwd -P)

# check if needed
# set -e

setup_gitconfig () {
    # ask if git config needs to be installed
    # file not exists because existing settings will be set in .example copied over to original symlink which will later be symlinked
    if ! [ -f ${ROOT_DIR}/git/gitconfig.symlink ]; then
        info 'setting up git config'
        git_credentials='cache'
        if [ "$(uname -s)" == "Darwin" ]; then
            git_credentials='osxkeychain'
        fi

        # how is it different from username?
        user ' - What is your github author name?' # exMachina
        read -e git_authorname 

        user ' - What is your github author email?' # shyam.padia@live.com
        read -e git_authoremail 

        user ' - What is your github user name?' # crizzy9
        read -e github_username 

        # set up ssh instead and make it optional
        # user ' - What is your GPG signing key? (Run `gpg --list-keys`)'
        # read -e gpg_signing_key

        user 'Do you want to setup ssh for git? [y]es, [n]o'
        read -n 1 shon
        if [ -f "~/.ssh/config" && -f "~/.ssh/id_rsa" ]; then
            info "SSH for git already set up."
            user "Copying the key into clipboard..."
            pbcopy < ~/.ssh/id_rsa.pub
            info "Copy the key onto github (https://help.github.com/en/enterprise/2.15/user/articles/adding-a-new-ssh-key-to-your-github-account)"
        elif [ $shon == "y" ]; then
            info 'Generating ssh-key'
            ssh-keygen -t rsa -b 4096 -C "$git_authoremail"
            info 'Starting SSH agent'
            eval "$(ssh-agent -s)"
            info 'Modifying ~/.ssh/config'
            echo "Host *\n\tAddKeysToAgent yes\n\tUseKeychain yes\n\tIdentityFile ~/.ssh/id_rsa" > ~/.ssh/config
            info "Adding SSH key"
            ssh-add -K ~/.ssh/id_rsa
            user "Copying the key into clipboard..."
            pbcopy < ~/.ssh/id_rsa.pub
            info "Copy the key onto github (https://help.github.com/en/enterprise/2.15/user/articles/adding-a-new-ssh-key-to-your-github-account)"
        fi

        sed -e "s/AUTHOR_NAME/$git_authorname/g" -e "s/AUTHOR_EMAIL/$git_authoremail/g" -e "s/GIT_CREDENTIAL_HELPER/$git_credentials/g" -e "s/AUTHOR_HANDLE/$github_username/g" git/gitconfig.symlink.example > git/gitconfig.symlink

        success 'git config'

    else
        info 'Skipping... git config already setup'
    fi
}

link_file()  {
    local src=$1 dst=$2
    local overwrite= backup= skip=
    local action=

    # -f if a file -d if if a direactory -L if a symbolic link, -o or
    # More operators at https://blog.100tb.com/scripting-if-comparison-operators-in-bash
    if [ -f "$dst" -o -d "$dst" -o -L "$dst" ]; then
        if  [ "$overwrite_all" == "false" ] && [ "$backup_all" == "false" ] && [ "$skip_all" == "false" ]; then
            local currentSrc="$(readlink $dst)" # reads destination symlink if it exists and checks if symlink already established with source
            if [ "$currentSrc" == "$src" ]; then
                skip=true;
            else
                # basename gets the actual name from the path
                user "File already exists: $dst ($(basename "$src")), What do you want to do?\n\
                    [s]kip, [S]kip all, [o]verwrite, [O]verwrite all, [b]ackup, [B]ackup all?"
                # reads only 1 character using -n 1
                read -n 1 action

                case "$action" in
                    o )
                        overwrite=true;;
                    O )
                        overwrite_all=true;;
                    s )
                        skip=true;;
                    S )
                        skip_all=true;;
                    b )
                        backup=true;;
                    B )
                        backup_all=true;;
                    * )
                        ;;
                esac
            fi
        fi


        # set overwrite as the value of all
        overwrite=${overwrite:-$overwrite_all}
        skip=${skip:-$skip_all}
        backup=${backup:-$backup_all}

        if [ "$overwrite" == "true" ]; then
            rm -rf "$dst"
            success "removed $dst"
        fi

        if [ "$backup" == "true" ]; then
            mv "$dst" "${dst}.backup"
            success "moved $dst to ${dst}.backup"
        fi

        if [ "$skip" == "true" ]; then
            success "skipped $src"
        fi
    fi

    if [ "$skip" != "true" ]; then # link src to dst
        ln -s "$1" "$2" # establish a softlink
        success "linked $1 to $2"
    fi
}

# symlinks dotfiles/config files to their appropriate location
install_dotfiles() {
    info 'installing dotfiles'

    local overwrite_all=false backup_all=false skip_all=false

    # should ignore files from vim/vim.symlink/undo because of maxdepth
    for src in $(find -H "$ROOT_DIR" -maxdepth 2 -name '*.symlink' -not -path '*.git*'); do
        # getting the filename from path without the extension
        dst="$HOME/.$(basename "${src%.*}")"
        link_file "$src" "$dst"
    done
}


user "Do you want to setup git? [y]es, [n]o"
read -n 1 gc
if [ "$gc" == "y" ]; then
    setup_gitconfig
fi

# could install nvim-typescript from here to resolve problem

# Running install scripts in alphabetical order
for installer in $(find . -name "*install.sh" -not -path '*.symlink*' | sort); do
    chmod +x "${installer}"
    sh -c "${installer}"
done

install_dotfiles

echo ''
success 'All installed!'
