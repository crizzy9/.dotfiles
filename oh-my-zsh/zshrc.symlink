###################
#### Oh My ZSH ####
###################
export ZSH="$HOME/.oh-my-zsh"
# ZSH_THEME="powerlevel10k/powerlevel10k"

plugins=(git)

source $ZSH/oh-my-zsh.sh

########################
#### Show your logo ####
########################
RB_RED=$(printf '\033[38;5;196m')
RB_ORANGE=$(printf '\033[38;5;202m')
RB_YELLOW=$(printf '\033[38;5;226m')
RB_GREEN=$(printf '\033[38;5;082m')
RB_BLUE=$(printf '\033[38;5;021m')
RB_INDIGO=$(printf '\033[38;5;093m')
RB_VIOLET=$(printf '\033[38;5;163m')
# printf '%s         %s__      %s           %s        %s       %s     %s__   %s\n' $RB_RED $RB_ORANGE $RB_YELLOW $RB_GREEN $RB_BLUE $RB_INDIGO $RB_VIOLET $RB_RESET
# printf '%s  ____  %s/ /_    %s ____ ___  %s__  __  %s ____  %s_____%s/ /_  %s\n' $RB_RED $RB_ORANGE $RB_YELLOW $RB_GREEN $RB_BLUE $RB_INDIGO $RB_VIOLET $RB_RESET
# printf '%s / __ \%s/ __ \  %s / __ `__ \%s/ / / / %s /_  / %s/ ___/%s __ \ %s\n' $RB_RED $RB_ORANGE $RB_YELLOW $RB_GREEN $RB_BLUE $RB_INDIGO $RB_VIOLET $RB_RESET
# printf '%s/ /_/ /%s / / / %s / / / / / /%s /_/ / %s   / /_%s(__  )%s / / / %s\n' $RB_RED $RB_ORANGE $RB_YELLOW $RB_GREEN $RB_BLUE $RB_INDIGO $RB_VIOLET $RB_RESET
# printf '%s\____/%s_/ /_/ %s /_/ /_/ /_/%s\__, / %s   /___/%s____/%s_/ /_/  %s\n' $RB_RED $RB_ORANGE $RB_YELLOW $RB_GREEN $RB_BLUE $RB_INDIGO $RB_VIOLET $RB_RESET
# printf '%s    %s        %s           %s /____/ %s       %s     %s          %s\n' $RB_RED $RB_ORANGE $RB_YELLOW $RB_GREEN $RB_BLUE $RB_INDIGO $RB_VIOLET $RB_RESET

# printf '%s |\     /| %s\n' $RB_RED $RB_ORANGE $RB_YELLOW $RB_GREEN $RB_BLUE $RB_INDIGO $RB_VIOLET $RB_RESET
printf '%s ||\     /|| %s\n' $RB_RED $RB_RESET
printf '%s || \   / || %s\n' $RB_RED $RB_RESET
printf '%s ||  \ /  || %s\n' $RB_RED $RB_RESET
printf '%s ||   v   || %s\n' $RB_RED $RB_RESET

#########################
#### ZSH Snap - Znap ####
#########################

# Download Znap, if it's not there yet.
# [[ -r ~/.oh-my-zsh/plugins/znap/znap.zsh ]] ||
#     git clone --depth 1 -- \
#         https://github.com/marlonrichert/zsh-snap.git ~/.oh-my-zsh/plugins/znap
source ~/.oh-my-zsh/plugins/znap/znap.zsh  # Start Znap

# Powerlevel10k
# enable powerlevel10k instant prompt
# if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
#   source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
# fi
# add above if below doesnt work
() { [[ -r $1 ]] && source $1 } ${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-$USERNAME.zsh
# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh

# other themes dont add with powerlevl10k
# `znap prompt` makes your prompt visible in just 15-40ms!
# znap prompt agnoster/agnoster-zsh-theme
# znap source ohmyzsh/ohmyzsh lib/{git,theme-and-appearance}
# znap prompt ohmyzsh/ohmyzsh robbyrussell
# PS1=$'%(?,%F{g},%F{r})%#%f '
# znap prompt
# znap source sorin-ionescu/prezto modules/{environment,history}
# znap source ohmyzsh/ohmyzsh \
#     'lib/(*~(git|theme-and-appearance).zsh)' plugins/git

# install plugins
znap source marlonrichert/zsh-autocomplete
znap source marlonrichert/zsh-edit
znap source marlonrichert/zsh-hist

typeset -g POWERLEVEL9K_INSTANT_PROMPT=quiet
znap source romkatv/powerlevel10k powerlevel10k.zsh-theme

ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE="fg=#ff00ff,bg=cyan,bold,underline"
ZSH_AUTOSUGGEST_STRATEGY=( history )
znap source zsh-users/zsh-autosuggestions

typeset -A ZSH_HIGHLIGHT_STYLES

# change highlights as per https://github.com/zsh-users/zsh-syntax-highlighting/blob/master/docs/highlighters/main.md
# ZSH_HIGHLIGHT_STYLES[suffix-alias]=fg=green,underline
# ZSH_HIGHLIGHT_STYLES[precommand]=fg=green,underline
# ZSH_HIGHLIGHT_STYLES[arg0]=fg=cyan,bold
# ZSH_HIGHLIGHT_STYLES[command]=fg=blue
# ZSH_HIGHLIGHT_STYLES[function]=fg=red
# ZSH_HIGHLIGHT_STYLES[alias]=fg=magenta,bold
# ZSH_HIGHLIGHT_STYLES[double-hypen-option]=fg=yellow,bold
# ZSH_HIGHLIGHT_STYLES[path]=fg=cyan
# ZSH_HIGHLIGHT_STYLES[globbing]='none'
export ZSH_HIGHLIGHT_HIGHLIGHTERS=( main brackets )
znap source zsh-users/zsh-syntax-highlighting

# `znap eval` makes evaluating generated command output up to 10 times faster.
znap eval iterm2 'curl -fsSL https://iterm2.com/shell_integration/zsh'

# Colors not working properly with zsh-syntax-highlighting
# znap eval trapd00r/LS_COLORS "$( whence -a dircolors gdircolors ) -b LS_COLORS"
# PS1=$'%{\e['$zcolor[di]$'m%}%~%{\e[m%}/ %#'
# znap source marlonrichert/zcolors
# znap eval   marlonrichert/zcolors "zcolors ${(q)LS_COLORS}"

# Combine `znap eval` with `curl` or `wget` to download, cache and source
znap eval omz-git 'curl -fsSL \
    https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/plugins/git/git.plugin.zsh'

##
# Defer initilization code with lazily loaded functions created by
# `znap function`.
#
znap function _pyenv pyenv              'eval "$( pyenv init - --no-rehash )"'
compctl -K    _pyenv pyenv

znap function _pip_completion pip       'eval "$( pip completion --zsh )"'
compctl -K    _pip_completion pip

znap function _python_argcomplete pipx  'eval "$( register-python-argcomplete pipx  )"'
complete -o nospace -o default -o bashdefault \
           -F _python_argcomplete pipx

znap function _pipenv pipenv            'eval "$( pipenv --completion )"'
compdef       _pipenv pipenv


##########################
#### Package Managers ####
##########################

# only include if installed with brew or apt
export NVM_DIR="$HOME/.config/nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion

# only include if installed with brew or apt
# >>> conda initialize >>>
# !! Contents within this block are managed by 'conda init' !!
__conda_setup="$('/Users/spadia/anaconda3/bin/conda' 'shell.zsh' 'hook' 2> /dev/null)"
if [ $? -eq 0 ]; then
    eval "$__conda_setup"
else
    if [ -f "/Users/spadia/anaconda3/etc/profile.d/conda.sh" ]; then
        . "/Users/spadia/anaconda3/etc/profile.d/conda.sh"
    else
        export PATH="/Users/spadia/anaconda3/bin:$PATH"
    fi
fi
unset __conda_setup
# <<< conda initialize <<<

##########################
#### Additional Setup ####
##########################
## TODO: Convert to common keybindings file

# additional path setup - modify per user
export PATH="/Users/spadia/.local/bin:$PATH"
export JAVA_HOME=/Library/Java/JavaVirtualMachines/amazon-corretto-11.jdk/Contents/Home

# additional exports
export LANG=en_US.UTF-8

# set defaults
nvim_exists=$(command -v "nvim" >/dev/null 2>&1)
if [[ $nvim_exists ]]; then
  export EDITOR='nvim'
else
  export EDITOR='vim'
fi

## custom exports
# export FZF_DEFAULT_OPTS='--height 40% --layout=reverse --border'
# export FZF_DEFAULT_COMMAND='rg --files --hidden --follow --glob "!.git/*"'
# export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"
# export FZF_ALT_C_COMMAND='rg --files --hidden --follow --glob "!.git/*"'
# export FZF_CTRL_R_OPTS="--preview 'echo {}' --preview-window down:3:hidden:wrap --bind '?:toggle-preview'"

## custom aliases
# alias rg='rg --hidden --follow --glob "!.git/*"'
alias lss='exa'
alias lsa='exa -la'

## custom mappings

### ripgrep / fzf keybindings ###
# bindkey '^P' fzf-history-widget
# bindkey '^R' fzf-history-widget
# bindkey '^T' fzf-cd-widget
# bindkey '^F' fzf-file-widget
# bindkey '^G' fzf-file-widget
# bindkey '^B' fzf-cd-widget

### zsh keybindings ###
bindkey '^[q' push-line-or-edit
bindkey -r '^Q' '^[Q'
bindkey '^ ' autosuggest-accept

### nvim keybindings ###
bindkey -s '^f' 'nvim $(rg --files | fzf --reverse)\n'

### history keybindings ###
### ranger keybindings ###
