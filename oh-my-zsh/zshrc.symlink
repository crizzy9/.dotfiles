#### Oh My ZSH ####
# =============================================================================
export ZSH="$HOME/.oh-my-zsh"
# ZSH_THEME="powerlevel10k/powerlevel10k"

plugins=(git nvm vi-mode)

source $ZSH/oh-my-zsh.sh

#### Show your logo ####
# =============================================================================
RB_RED=$(printf '\033[38;5;196m')
RB_ORANGE=$(printf '\033[38;5;202m')
RB_YELLOW=$(printf '\033[38;5;226m')
RB_GREEN=$(printf '\033[38;5;082m')
RB_BLUE=$(printf '\033[38;5;021m')
RB_INDIGO=$(printf '\033[38;5;093m')
RB_VIOLET=$(printf '\033[38;5;163m')

# font - isometric 3 - https://patorjk.com/software/taag/#p=display&f=Isometric3&t=Mr%20Black
printf '%s      ___      %s      ___         %s                    %s               %s      ___      %s      ___      %s      ___      %s\n' $RB_RED $RB_ORANGE $RB_YELLOW $RB_GREEN $RB_BLUE $RB_INDIGO $RB_VIOLET $RB_RESET
printf '%s     /__/\     %s     /  /\        %s          _____     %s               %s     /  /\     %s     /  /\     %s     /__/|     %s\n' $RB_RED $RB_ORANGE $RB_YELLOW $RB_GREEN $RB_BLUE $RB_INDIGO $RB_VIOLET $RB_RESET
printf '%s    |  |::\    %s    /  /::\       %s         /  /::\    %s               %s    /  /::\    %s    /  /:/     %s    |  |:|     %s\n' $RB_RED $RB_ORANGE $RB_YELLOW $RB_GREEN $RB_BLUE $RB_INDIGO $RB_VIOLET $RB_RESET
printf '%s    |  |:|:\   %s   /  /:/\:\      %s        /  /:/\:\   %s  ___     ___  %s   /  /:/\:\   %s   /  /:/      %s    |  |:|     %s\n' $RB_RED $RB_ORANGE $RB_YELLOW $RB_GREEN $RB_BLUE $RB_INDIGO $RB_VIOLET $RB_RESET
printf '%s  __|__|:|\:\  %s  /  /:/~/:/      %s       /  /:/~/::\  %s /__/\   /  /\ %s  /  /:/~/::\  %s  /  /:/  ___  %s  __|  |:|     %s\n' $RB_RED $RB_ORANGE $RB_YELLOW $RB_GREEN $RB_BLUE $RB_INDIGO $RB_VIOLET $RB_RESET
printf '%s /__/::::| \:\ %s /__/:/ /:/___    %s      /__/:/ /:/\:| %s \  \:\ /  /:/ %s /__/:/ /:/\:\ %s /__/:/  /  /\ %s /__/\_|:|____ %s\n' $RB_RED $RB_ORANGE $RB_YELLOW $RB_GREEN $RB_BLUE $RB_INDIGO $RB_VIOLET $RB_RESET
printf '%s \  \:\~~\__\/ %s \  \:\/:::::/    %s      \  \:\/:/~/:/ %s  \  \:\  /:/  %s \  \:\/:/__\/ %s \  \:\ /  /:/ %s \  \:\/:::::/ %s\n' $RB_RED $RB_ORANGE $RB_YELLOW $RB_GREEN $RB_BLUE $RB_INDIGO $RB_VIOLET $RB_RESET
printf '%s  \  \:\       %s  \  \::/~~~~     %s       \  \::/ /:/  %s   \  \:\/:/   %s  \  \::/      %s  \  \:\  /:/  %s  \  \::/~~~~  %s\n' $RB_RED $RB_ORANGE $RB_YELLOW $RB_GREEN $RB_BLUE $RB_INDIGO $RB_VIOLET $RB_RESET
printf '%s   \  \:\      %s   \  \:\         %s        \  \:\/:/   %s    \  \::/    %s   \  \:\      %s   \  \:\/:/   %s   \  \:\      %s\n' $RB_RED $RB_ORANGE $RB_YELLOW $RB_GREEN $RB_BLUE $RB_INDIGO $RB_VIOLET $RB_RESET
printf '%s    \  \:\     %s    \  \:\        %s         \  \::/    %s     \__\/     %s    \  \:\     %s    \  \::/    %s    \  \:\     %s\n' $RB_RED $RB_ORANGE $RB_YELLOW $RB_GREEN $RB_BLUE $RB_INDIGO $RB_VIOLET $RB_RESET
printf '%s     \__\/     %s     \__\/        %s          \__\/     %s               %s     \__\/     %s     \__\/     %s     \__\/     %s\n' $RB_RED $RB_ORANGE $RB_YELLOW $RB_GREEN $RB_BLUE $RB_INDIGO $RB_VIOLET $RB_RESET

#### ZSH Snap - Znap ####
# =============================================================================

# Download Znap, if it's not there yet.
# [[ -r ~/.oh-my-zsh/plugins/znap/znap.zsh ]] ||
#     git clone --depth 1 -- \
#         https://github.com/marlonrichert/zsh-snap.git ~/.oh-my-zsh/plugins/znap
source ~/.oh-my-zsh/plugins/znap/znap.zsh  # Start Znap

# Powerlevel10k
# enable powerlevel10k instant prompt
# if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
#   source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
# fi
# add above if below doesnt work
() { [[ -r $1 ]] && source $1 } ${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-$USERNAME.zsh
# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh

# other themes dont add with powerlevl10k
# `znap prompt` makes your prompt visible in just 15-40ms!
# znap prompt agnoster/agnoster-zsh-theme
# znap source ohmyzsh/ohmyzsh lib/{git,theme-and-appearance}
# znap prompt ohmyzsh/ohmyzsh robbyrussell
# PS1=$'%(?,%F{g},%F{r})%#%f '
# znap prompt
# znap source sorin-ionescu/prezto modules/{environment,history}
# znap source ohmyzsh/ohmyzsh \
#     'lib/(*~(git|theme-and-appearance).zsh)' plugins/git

# install plugins
znap source marlonrichert/zsh-autocomplete
znap source marlonrichert/zsh-edit
znap source marlonrichert/zsh-hist

typeset -g POWERLEVEL9K_INSTANT_PROMPT=quiet
typeset -g POWERLEVEL9K_TERM_SHELL_INTEGRATION=true
typeset -g POWERLEVEL9K_PROMPT_ADD_NEWLINE=false
typeset -g POWERLEVEL9K_SHORTEN_STRATEGY=truncate_to_unique
typeset -g POWERLEVEL9K_SHORTEN_DIR_LENGTH=1
typeset -g POWERLEVEL9K_DIR_MAX_LENGTH=1
znap source romkatv/powerlevel10k powerlevel10k.zsh-theme

ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE="fg=#ff00ff,bg=cyan,bold,underline"
ZSH_AUTOSUGGEST_STRATEGY=( history )
znap source zsh-users/zsh-autosuggestions

typeset -A ZSH_HIGHLIGHT_STYLES

# change highlights as per https://github.com/zsh-users/zsh-syntax-highlighting/blob/master/docs/highlighters/main.md
# ZSH_HIGHLIGHT_STYLES[suffix-alias]=fg=green,underline
# ZSH_HIGHLIGHT_STYLES[precommand]=fg=green,underline
# ZSH_HIGHLIGHT_STYLES[arg0]=fg=cyan,bold
# ZSH_HIGHLIGHT_STYLES[command]=fg=blue
# ZSH_HIGHLIGHT_STYLES[function]=fg=red
# ZSH_HIGHLIGHT_STYLES[alias]=fg=magenta,bold
# ZSH_HIGHLIGHT_STYLES[double-hypen-option]=fg=yellow,bold
# ZSH_HIGHLIGHT_STYLES[path]=fg=cyan
# ZSH_HIGHLIGHT_STYLES[globbing]='none'
export ZSH_HIGHLIGHT_HIGHLIGHTERS=( main brackets )
znap source zsh-users/zsh-syntax-highlighting

# `znap eval` makes evaluating generated command output up to 10 times faster.
znap eval iterm2 'curl -fsSL https://iterm2.com/shell_integration/zsh'
znap eval wezterm 'curl -fsSL https://raw.githubusercontent.com/wez/wezterm/main/assets/shell-integration/wezterm.sh'
znap eval kitty 'curl -fsSL https://raw.githubusercontent.com/kovidgoyal/kitty/master/shell-integration/zsh/kitty-integration'

# Colors not working properly with zsh-syntax-highlighting
# znap eval trapd00r/LS_COLORS "$( whence -a dircolors gdircolors ) -b LS_COLORS"
# PS1=$'%{\e['$zcolor[di]$'m%}%~%{\e[m%}/ %#'
# znap source marlonrichert/zcolors
# znap eval   marlonrichert/zcolors "zcolors ${(q)LS_COLORS}"

# Combine `znap eval` with `curl` or `wget` to download, cache and source
znap eval omz-git 'curl -fsSL \
    https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/plugins/git/git.plugin.zsh'

##
# Defer initilization code with lazily loaded functions created by
# `znap function`.
#
znap function _pyenv pyenv              'eval "$( pyenv init - --no-rehash )"'
compctl -K    _pyenv pyenv

znap function _pip_completion pip       'eval "$( pip completion --zsh )"'
compctl -K    _pip_completion pip

znap function _python_argcomplete pipx  'eval "$( register-python-argcomplete pipx  )"'
complete -o nospace -o default -o bashdefault \
           -F _python_argcomplete pipx

znap function _pipenv pipenv            'eval "$( pipenv --completion )"'
compdef       _pipenv pipenv


#### Package Managers ####
# =============================================================================

# only include if installed with brew or apt
# works via zsh plugin
# export NVM_DIR="$HOME/.config/nvm"
# [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
# [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion

# TODO: set npm registry for both company and individual
# npm config set registry https://registry.npmjs.intuit.com/
# npm config set registry https://registry.npmjs.com/
#

# only include if installed with brew or apt
# >>> conda initialize >>>
# !! Contents within this block are managed by 'conda init' !!
__conda_setup="$("${HOME}/anaconda3/bin/conda" shell.zsh hook 2> /dev/null)"

if [ $? -eq 0 ]; then
    eval "$__conda_setup"
else
    if [ -f "$HOME/anaconda3/etc/profile.d/conda.sh" ]; then
        . "$HOME/anaconda3/etc/profile.d/conda.sh"
    else
        export PATH="$HOME/anaconda3/bin:$PATH"
    fi
fi
unset __conda_setup
# <<< conda initialize <<<

#### Additional Setup ####
# =============================================================================
## TODO: Convert to common keybindings file

# additional path setup - modify per user
export PATH="/Users/spadia/.local/bin:$PATH"
export PATH="/Users/spadia/.config/tmux/plugins/tmuxifier/bin:$PATH"
export JAVA_HOME=/Library/Java/JavaVirtualMachines/amazon-corretto-11.jdk/Contents/Home

# additional exports
export LANG=en_US.UTF-8

# set defaults
nvim_exists=$(command -v "nvim")
if [ -n $nvim_exists ]; then
  export EDITOR='nvim'
else
  export EDITOR='vim'
fi

eval "$(tmuxifier init -)"

### additional settings ####
# =============================================================================
## setup vim mode -- using vi-mode plugin instead
# bindkey -v

#### custom exports ####
# =============================================================================
export BAT_CONFIG_PATH="$HOME/.config/bat/bat.conf"
export ZSH_HIGHLIGHT_STYLES[comment]='none'

#### custom aliases ####
# =============================================================================
# alias rg='rg --hidden --follow --glob "!.git/*"'

# ls aliases
alias lss='exa --icons'
alias lsa='exa -la --icons'
alias lsag='exa -la --icons --git --header'
alias lsat='exa -la --icons --git --header --tree -L 2 --git-ignore'

# Json aliases
## copy formatted json to clipboard
alias jj='pbpaste | jq . | pbcopy'
alias jjj='pbpaste | jq .'

# lazygit
alias lg='lazygit'

# jupyter
alias jupyter-bg='jupyter notebook > /dev/null 2>&1 &'
alias jupyter-lab-bg='jupyter-lab > /dev/null 2>&1 &'

# Pomodoro timer
# requires timer and terminal-notifier to be installed
# https://gist.github.com/bashbunni/f6b04fc4703903a71ce9f70c58345106
pomo () {
    local duration=${1:-25m}
    local ptype=${2:-work}
    local message=
    local image=
    local emoji=

    # appIcon not working
    if [ "$ptype" = "work" ]; then
        local message='Work Timer is up! Take a Break'
        local image='~/Pictures/pumpkinx.png'
        local emoji='🎃'
    elif [ "$ptype" = "rest" ]; then
        local message='Break is over! Get back to work'
        local image='~/Pictures/pumpkin.jpg'
        local emoji='👻'
    else
        echo "Invalid type"
        return 1
    fi

    timer $duration -n "Pomodoro for ${ptype}" && say $message && terminal-notifier -title 'Pomodoro Timer'\
        -subtitle "${message} ${emoji}"\
        -message "Nice! You ${ptype}ed for ${duration}"\
        --appIcon $image\
        -sound Crystal
}

#### fzf / fd / ripgrep keybindings ####
# =============================================================================

##### FZF config definitions #####
# use fd for file search
# use rg for content search
# bat config taken from bat.conf
##################################


##### existing keybindings in key-bindings.zsh #####
# bindkey '^R' fzf-history-widget
# bindkey '^T' fzf-file-widget
# bindkey 'Alt-C' fzf-cd-widget
####################################################


##### TO ENABLE FZF KEYBINDINGS #####
# if not found from root / do `fd "key-bindings.zsh"` or `dpkg -L fzf | grep bindings`
# location depends on installation method and os, there might be symlinks also like with brew
#
source /usr/local/opt/fzf/shell/key-bindings.zsh
source /usr/local/opt/fzf/shell/completion.zsh
#####################################


##### FZF defaults #####
# export FZF_DEFAULT_COMMAND='rg --files --hidden --follow -g "!{.git,node_modules}/*" 2> /dev/null'
# export FZF_DEFAULT_OPTS='--height 60% --layout=reverse --border --preview "bat --color=always --style=header,grid --line-range :600 {}"'
########################

##### Ctrl + I fzf completion #####
# Default
# Works with Tab and Ctrl + I (Ctrl + I might be remapped to autosuggest accept or tmux prefix)
###################################


##### Ctrl+R commands #####
# export FZF_CTRL_R_OPTS="--preview 'echo {}' --preview-window down:3:hidden:wrap --bind '?:toggle-preview'"
# export FZF_CTRL_R_OPTS="--preview 'echo {}' --preview-window down:3:hidden:wrap --bind '?:toggle-preview' --bind 'ctrl-y:execute-silent(echo {+} | pbcopy)+abort'"
export FZF_CTRL_R_OPTS="
    --prompt='Command> '
    --preview='echo {}' --preview-window up:3:hidden:wrap
    --bind='ctrl-/:toggle-preview'
    --bind='ctrl-y:execute-silent(echo -n {2..} | pbcopy)+abort'
    --color=header:italic
    --header='CTRL-/: toggle preview | CTRL-Y: copy command'"
###########################


##### Ctrl+T commands #####
# paste selected file path into command line

# export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"
export FZF_CTRL_T_COMMAND='fd --type f --hidden --follow --exclude "{.git,node_modules,__pycache__}"'

# remove abort to go back to fzf
export FZF_CTRL_T_OPTS="
    --height 80%
    --layout=reverse
    --border
    --margin=1
    --padding=1
    --prompt='Files> '
    --preview-window='right:50%'
    --preview='bat --line-range :500 {}'
    --bind='ctrl-/:change-preview-window(down|hidden|)'
    --bind='ctrl-o:execute(nvim {1} > /dev/tty)+abort'
    --color=header:italic
    --header='CTRL-/: toggle preview | CTRL-O: open in neovim'"
###########################


##### Alt+C commands #####
# cd to selected directory
# export FZF_ALT_C_COMMAND='rg --files --hidden --follow --glob "!.git/*"'
export FZF_ALT_C_COMMAND='fd --type d --hidden --follow --exclude "{.git,node_modules,__pycache__}"'
export FZF_ALT_C_OPTS='--preview "tree -C {}"'
###########################


##### test widget #####
_my_function() {
    echo "hello world function"
}

_my_widget() {
    # local selection
    # selection=$(fzf <"$TTY") || return
    # LBUFFER+="$selection"
    echo "hello world widget"
    zle .kill-whole-line
    zle -U "git diff $CUTBUFFER"
}
# zle -N _my_widget
# bindkey '^Xd' _my_widget
#######################


##### search processes and kill #####
# (date; ps -ef) |
# fzf --bind='ctrl-r:reload(date; ps -ef)' \
#     --header=$'Press CTRL-R to reload\n\n' --header-lines=2 \
#     --preview='echo {}' --preview-window=down,3,wrap \
#     --layout=reverse --height=80% | awk '{print $2}' | xargs kill -9
#
function search_process {
    (date; ps -ef) | fzf-tmux -d -- --bind="ctrl-r:reload(date; ps -ef)" --header="Press CTRL-R to reload" --header-lines=2 --preview="echo {}" --preview-window=down,3,wrap --layout=reverse --height=80% | awk '{print $2}'
}

bindkey -s '^Xd' 'search_process\n'
#####################################


##### fzf live grep #####
# live grep with ripgrep/fzf and open in neovim
# Switch between Ripgrep launcher mode (CTRL-R) and fzf filtering mode (CTRL-F)

function fzfLiveGrepRg {
    rm -f /tmp/rg-fzf-{r,f}
    RG_PREFIX="rg --column --line-number --no-heading --color=always --smart-case --glob '!{.git,node_modules,__pycache__}/*' "
    INITIAL_QUERY="${*:-}"
    : | fzf-tmux -h 50 -w 150 -- --height=80% --layout=reverse --ansi --disabled --query "$INITIAL_QUERY" \
        --bind "start:reload($RG_PREFIX {q})+unbind(ctrl-r)" \
        --bind "change:reload:sleep 0.1; $RG_PREFIX {q} || true" \
        --bind "ctrl-f:unbind(change,ctrl-f)+change-prompt(2. fzf> )+enable-search+rebind(ctrl-r)+transform-query(echo {q} > /tmp/rg-fzf-r; cat /tmp/rg-fzf-f)" \
        --bind "ctrl-r:unbind(ctrl-r)+change-prompt(1. ripgrep> )+disable-search+reload($RG_PREFIX {q} || true)+rebind(change,ctrl-f)+transform-query(echo {q} > /tmp/rg-fzf-f; cat /tmp/rg-fzf-r)" \
        --color "hl:-1:underline,hl+:-1:underline:reverse" \
        --prompt '1. ripgrep> ' \
        --delimiter : \
        --header '╱ CTRL-R (ripgrep mode) ╱ CTRL-F (fzf mode) ╱' \
        --preview 'bat --color=always {1} --highlight-line {2}' \
        --preview-window 'up,60%,border-bottom,+{2}+3/3,~3' \
        # --bind 'enter:become(nvim {1} +{2})'
}

function nvimGoToLine {
    selection=$(fzfLiveGrepRg)
    if [ -z "$selection" ]; then
        echo "No file selected"
    else
        filename=$(echo $selection | awk -F: '{print $1}')
        line=$(echo $selection | awk -F: '{print $2}')
        nvim $(printf "+%s %s" $line $filename) +"normal zz";
    fi
}

bindkey -s '^X' 'nvimGoToLine\n'

#########################


##### search files and open in neovim #####
function fzfFindFileFd {
    # uses fzf-tmux to display files in preview window
    echo $(fd --type f --hidden --follow --exclude '{.git,node_modules,__pycache__}' | fzf-tmux -h 50 -w 150 -- --height=80% --layout=reverse --border --margin=1 --padding=1 --prompt='Files> ' --preview='bat --line-range :500 {}' --bind='ctrl-/:change-preview-window(down|hidden|)' --color=header:italic --header='Ctrl-/: toggle preview')
}

function nvimGoToFile {
    selection=$(fzfFindFileFd)
    if [ -z "$selection" ]; then
        echo "No file selected"
    else
        nvim $selection
    fi
}

bindkey -s '^f' 'nvimGoToFile\n'
# search file and open in neovim - uses fzf default command and opts for file search using fd and bat
# bindkey -s '^f' 'nvim $(fzf)\n'
# bindkey '^F' fzf-file-widget
###########################################

##### tmux sesh #####
#####################
function tmuxSeshList {
    echo $(sesh list -tz | fzf-tmux -p 55%,60% --no-sort --border-label ' sesh ' --prompt '⚡  ' --header '  ^a all ^t tmux ^x zoxide ^f find' --bind 'tab:down,btab:up' --bind 'ctrl-a:change-prompt(⚡  )+reload(sesh list)' --bind 'ctrl-t:change-prompt(🪟  )+reload(sesh list -t)' --bind 'ctrl-x:change-prompt(📁  )+reload(sesh list -z)' --bind 'ctrl-f:change-prompt(🔎  )+reload(fd -H -d 2 -t d -E .Trash . ~)')
}

function tmuxSeshConnect {
    selection=$(tmuxSeshList)
    if [ -z "$selection" ]; then
        echo "No session selected"
    else
        sesh connect $selection
    fi
}
bindkey -s '^g' 'tmuxSeshConnect\n'
#####################


#### zsh keybindings ####
# =============================================================================
bindkey '^[q' push-line-or-edit
bindkey -r '^Q' '^[Q'
bindkey '^ ' autosuggest-accept

#### ranger keybindings ####
# =============================================================================

#### ranger-zoxide ####
# =============================================================================


# =============================================================================
#### zoxide configuration and keybindings ####
# =============================================================================


#### Utility functions for zoxide ###
# =============================================================================

# pwd based on the value of _ZO_RESOLVE_SYMLINKS.
function __zoxide_pwd() {
    \builtin pwd -L
}

# cd + custom logic based on the value of _ZO_ECHO.
function __zoxide_cd() {
    # shellcheck disable=SC2164
    \builtin cd -- "$@"
}

# =============================================================================
#
# Hook configuration for zoxide.
#

# Hook to add new entries to the database.
function __zoxide_hook() {
    # shellcheck disable=SC2312
    \command zoxide add -- "$(__zoxide_pwd)"
}

# Initialize hook.
# shellcheck disable=SC2154
if [[ ${precmd_functions[(Ie)__zoxide_hook]:-} -eq 0 ]] && [[ ${chpwd_functions[(Ie)__zoxide_hook]:-} -eq 0 ]]; then
    chpwd_functions+=(__zoxide_hook)
fi

# =============================================================================
#
# When using zoxide with --no-cmd, alias these internal functions as desired.
#

__zoxide_z_prefix='z#'

# Jump to a directory using only keywords.
function __zoxide_z() {
    # shellcheck disable=SC2199
    if [[ "$#" -eq 0 ]]; then
        __zoxide_cd ~
    elif [[ "$#" -eq 1 ]] && { [[ -d "$1" ]] || [[ "$1" = '-' ]] || [[ "$1" =~ ^[-+][0-9]$ ]]; }; then
        __zoxide_cd "$1"
    elif [[ "$@[-1]" == "${__zoxide_z_prefix}"?* ]]; then
        # shellcheck disable=SC2124
        \builtin local result="${@[-1]}"
        __zoxide_cd "${result:${#__zoxide_z_prefix}}"
    else
        \builtin local result
        # shellcheck disable=SC2312
        result="$(\command zoxide query --exclude "$(__zoxide_pwd)" -- "$@")" &&
            __zoxide_cd "${result}"
    fi
}

# Jump to a directory using interactive search.
function __zoxide_zi() {
    \builtin local result
    result="$(\command zoxide query --interactive -- "$@")" && __zoxide_cd "${result}"
}

# Completions.
if [[ -o zle ]]; then
    function __zoxide_z_complete() {
        # Only show completions when the cursor is at the end of the line.
        # shellcheck disable=SC2154
        [[ "${#words[@]}" -eq "${CURRENT}" ]] || return 0

        if [[ "${#words[@]}" -eq 2 ]]; then
            _files -/
        elif [[ "${words[-1]}" == '' ]] && [[ "${words[-2]}" != "${__zoxide_z_prefix}"?* ]]; then
            \builtin local result
            # shellcheck disable=SC2086,SC2312
            if result="$(\command zoxide query --exclude "$(__zoxide_pwd)" --interactive -- ${words[2,-1]})"; then
                result="${__zoxide_z_prefix}${result}"
                # shellcheck disable=SC2296
                compadd -Q "${(q-)result}"
            fi
            \builtin printf '\e[5n'
        fi
        return 0
    }

    \builtin bindkey '\e[0n' 'reset-prompt'
    [[ "${+functions[compdef]}" -ne 0 ]] && \compdef __zoxide_z_complete __zoxide_z
fi

# =============================================================================
#
# Commands for zoxide. Disable these using --no-cmd.
#

\builtin alias z=__zoxide_z
\builtin alias zi=__zoxide_zi

# =============================================================================
#
# To initialize zoxide, add this to your configuration (usually ~/.zshrc):
#
# eval "$(zoxide init zsh)"
# =============================================================================
# =============================================================================


#### additional sources ####
# =============================================================================

# source broot config
# source /Users/spadia/.config/broot/launcher/bash/br
