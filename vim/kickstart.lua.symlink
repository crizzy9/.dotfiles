--[[

=====================================================================
==================== READ THIS BEFORE CONTINUING ====================
=====================================================================

Kickstart.nvim is *not* a distribution.

Kickstart.nvim is a template for your own configuration.
  The goal is that you can read every line of code, top-to-bottom, understand
  what your configuration is doing, and modify it to suit your needs.

  Once you've done that, you should start exploring, configuring and tinkering to
  explore Neovim!

  If you don't know anything about Lua, I recommend taking some time to read through
  a guide. One possible example:
  - https://learnxinyminutes.com/docs/lua/


  And then you can explore or search through `:help lua-guide`
  - https://neovim.io/doc/user/lua-guide.html


Kickstart Guide:

I have left several `:help X` comments throughout the init.lua
You should run that command and read that help section for more information.

In addition, I have some `NOTE:` items throughout the file.
These are for you, the reader to help understand what is happening. Feel free to delete
them once you know what you're doing, but they should serve as a guide for when you
are first encountering a few different constructs in your nvim config.

I hope you enjoy your Neovim journey,
- TJ

P.S. You can delete this when you're done too. It's your config now :)
--]]

-- Set <space> as the leader key
-- See `:help mapleader`
--  NOTE: Must happen before plugins are required (otherwise wrong leader will be used)
vim.g.mapleader = ' '
vim.g.maplocalleader = ' '

-- Turn off netrw to work with nvim-tree
vim.g.loaded_netrw = 1
vim.g.loaded_netrwPlugin = 1

-- disable --INSERT-- messages, already shown in lualine, still show recording message with noice
vim.opt.showmode = false

-- [[ Install `lazy.nvim` plugin manager ]]
--    https://github.com/folke/lazy.nvim
--    `:help lazy.nvim.txt` for more info
local lazypath = vim.fn.stdpath 'data' .. '/lazy/lazy.nvim'
if not vim.loop.fs_stat(lazypath) then
  vim.fn.system {
    'git',
    'clone',
    '--filter=blob:none',
    'https://github.com/folke/lazy.nvim.git',
    '--branch=stable', -- latest stable release
    lazypath,
  }
end
vim.opt.rtp:prepend(lazypath)

-- [[ Configure plugins ]]
-- NOTE: Here is where you install your plugins.
--  You can configure plugins using the `config` key.
--
--  You can also configure plugins after the setup call,
--    as they will be available in your neovim runtime.
require('lazy').setup({
  -- NOTE: First, some plugins that don't require any configuration

  -- Git related plugins
  'tpope/vim-fugitive',
  'tpope/vim-rhubarb',

  -- Detect tabstop and shiftwidth automatically
  -- 'tpope/vim-sleuth',
  -- 'tpope/vim-rsi',

  -- NOTE: This is where your plugins related to LSP can be installed.
  --  The configuration is done below. Search for lspconfig to find it below.
  {
    -- LSP Configuration & Plugins
    'neovim/nvim-lspconfig',
    dependencies = {
      -- Automatically install LSPs to stdpath for neovim
      'williamboman/mason.nvim',
      'williamboman/mason-lspconfig.nvim',
      -- { 'antosha417/nvim-lsp-file-operations', config = true },

      -- Useful status updates for LSP
      -- NOTE: `opts = {}` is the same as calling `require('fidget').setup({})`
      { 'j-hui/fidget.nvim', opts = {} },

      -- Additional lua configuration, makes nvim stuff amazing!
      'folke/neodev.nvim',
    },
  },

  {
    -- Autocompletion
    'hrsh7th/nvim-cmp',
    event = 'InsertEnter',
    dependencies = {
      -- Snippet Engine & its associated nvim-cmp source
      'L3MON4D3/LuaSnip',
      'saadparwaiz1/cmp_luasnip',

      -- Adds LSP completion capabilities
      'hrsh7th/cmp-nvim-lua',
      'hrsh7th/cmp-nvim-lsp',
      'hrsh7th/cmp-path',
      'hrsh7th/cmp-buffer',

      -- Adds a number of user-friendly snippets
      'rafamadriz/friendly-snippets',
    },
  },

  {
    'onsails/lspkind-nvim',
    lazy = true,
    config = function()
      require('lspkind').init({
        mode = "symbol_text",
        preset = "codicons",
      })
    end,
  },

  -- Useful plugin to show you pending keybinds.
  { 'folke/which-key.nvim', opts = {} },
  {
    -- Adds git related signs to the gutter, as well as utilities for managing changes
    'lewis6991/gitsigns.nvim',
    opts = {
      -- See `:help gitsigns.txt`
      signs = {
        add = { text = '+' },
        change = { text = '~' },
        delete = { text = '_' },
        topdelete = { text = '‾' },
        changedelete = { text = '~' },
      },
      on_attach = function(bufnr)
        local gs = package.loaded.gitsigns

        local function map(mode, l, r, opts)
          opts = opts or {}
          opts.buffer = bufnr
          vim.keymap.set(mode, l, r, opts)
        end

        -- Navigation
        map({ 'n', 'v' }, ']c', function()
          if vim.wo.diff then
            return ']c'
          end
          vim.schedule(function()
            gs.next_hunk()
          end)
          return '<Ignore>'
        end, { expr = true, desc = 'Jump to next hunk' })

        map({ 'n', 'v' }, '[c', function()
          if vim.wo.diff then
            return '[c'
          end
          vim.schedule(function()
            gs.prev_hunk()
          end)
          return '<Ignore>'
        end, { expr = true, desc = 'Jump to previous hunk' })

        -- Actions
        -- visual mode
        map('v', '<leader>hs', function()
          gs.stage_hunk { vim.fn.line '.', vim.fn.line 'v' }
        end, { desc = 'stage git hunk' })
        map('v', '<leader>hr', function()
          gs.reset_hunk { vim.fn.line '.', vim.fn.line 'v' }
        end, { desc = 'reset git hunk' })
        -- normal mode
        map('n', '<leader>hs', gs.stage_hunk, { desc = 'git stage hunk' })
        map('n', '<leader>hr', gs.reset_hunk, { desc = 'git reset hunk' })
        map('n', '<leader>hS', gs.stage_buffer, { desc = 'git Stage buffer' })
        map('n', '<leader>hu', gs.undo_stage_hunk, { desc = 'undo stage hunk' })
        map('n', '<leader>hR', gs.reset_buffer, { desc = 'git Reset buffer' })
        map('n', '<leader>hp', gs.preview_hunk, { desc = 'preview git hunk' })
        map('n', '<leader>hb', function()
          gs.blame_line { full = false }
        end, { desc = 'git blame line' })
        map('n', '<leader>hd', gs.diffthis, { desc = 'git diff against index' })
        map('n', '<leader>hD', function()
          gs.diffthis '~'
        end, { desc = 'git diff against last commit' })

        -- Toggles
        map('n', '<leader>tb', gs.toggle_current_line_blame, { desc = 'toggle git blame line' })
        map('n', '<leader>td', gs.toggle_deleted, { desc = 'toggle git show deleted' })

        -- Text object
        map({ 'o', 'x' }, 'ih', ':<C-U>Gitsigns select_hunk<CR>', { desc = 'select git hunk' })
      end,
    },
  },

  {
    "catppuccin/nvim",
    name = "catppuccin",
    priority = 1000,
    config = function ()
      vim.cmd.colorscheme 'catppuccin'
    end
  },

  {
    -- Set lualine as statusline
    'nvim-lualine/lualine.nvim',
    -- See `:help lualine.txt`
    opts = {
      options = {
        -- icons_enabled = false,
        theme = 'catppuccin',
        -- disabled_filetypes = { 'NvimTree' },
        -- component_separators = '|',
        -- section_separators = '',
      },
      sections = {
        -- lualine_c = { 'filename' },
        lualine_c = { 'buffers' },
        lualine_x = {
          {
            'encoding',
            -- only show if not utf-8
            cond = function()
              return vim.bo.fileencoding ~= 'utf-8'
            end,
          },
          'filetype'
        },
      },
      extensions = {
        'fugitive',
        'nvim-tree',
        -- 'fzf',
        {
          sections = {
            lualine_a = { 'filename' },
            lualine_z = { 'filetype' },
          },
          filetypes = { 'undotree', 'undotreeDiff' },
        },
        {
          sections = {
            lualine_a = { 'filename' },
            lualine_z = { 'filetype' },
          },
          filetypes = { 'query' },
        },
      },
    },
  },

  {
    -- Add indentation guides even on blank lines
    'lukas-reineke/indent-blankline.nvim',
    -- Enable `lukas-reineke/indent-blankline.nvim`
    -- See `:help ibl`
    main = 'ibl',
    opts = {},
  },

  -- "gc" to comment visual regions/lines
  { 'numToStr/Comment.nvim', opts = {} },

  -- Fuzzy Finder (files, lsp, etc)
  {
    'nvim-telescope/telescope.nvim',
    -- branch = '0.1.x',
    dependencies = {
      'nvim-lua/plenary.nvim',
      -- Fuzzy Finder Algorithm which requires local dependencies to be built.
      -- Only load if `make` is available. Make sure you have the system
      -- requirements installed.
      {
        'nvim-telescope/telescope-fzf-native.nvim',
        -- NOTE: If you are having trouble with this installation,
        --       refer to the README for telescope-fzf-native for more instructions.
        build = 'make',
        cond = function()
          return vim.fn.executable 'make' == 1
        end,
      },
    },
  },

  {
    -- Highlight, edit, and navigate code
    'nvim-treesitter/nvim-treesitter',
    dependencies = {
      'nvim-treesitter/nvim-treesitter-textobjects',
    },
    build = ':TSUpdate',
  },

  -- NOTE: Next Step on Your Neovim Journey: Add/Configure additional "plugins" for kickstart
  --       These are some example plugins that I've included in the kickstart repository.
  --       Uncomment any of the lines below to enable them.
  -- require 'kickstart.plugins.autoformat',
  -- require 'kickstart.plugins.debug',

  -- NOTE: The import below can automatically add your own plugins, configuration, etc from `lua/custom/plugins/*.lua`
  --    You can use this folder to prevent any conflicts with this init.lua if you're interested in keeping
  --    up-to-date with whatever is in the kickstart repo.
  --    Uncomment the following line and add your plugins to `lua/custom/plugins/*.lua` to get going.
  --
  --    For additional information see: https://github.com/folke/lazy.nvim#-structuring-your-plugins
  -- { import = 'custom.plugins' },
  --

  -- ********************** CUSTOM *************************
  -- nvim tree
  {
    -- WHAT IS THE POINT OF IMPORT _ READ LAZY INSTRUCTIONS
    -- import = 'nvim-tree/nvim-tree.lua',
    'nvim-tree/nvim-tree.lua',
    version = "*",
    -- lazy = true,
    -- event = "VeryLazy",
    dependencies = {
      "nvim-tree/nvim-web-devicons",
    },
    keys = {
      { "<leader>tn" ,"<cmd>NvimTreeToggle<cr>", desc = "[T]oggle [N]vim-tree" },
    },
    config = function()
      require("nvim-tree").setup {
        -- TODO: doesnt work from on_attach
        -- on_attach = function(bufnr)
        --   local api = require "nvim-tree.api"
          -- default mappings
          -- api.config.mappings.default_on_attach(bufnr)
          -- vim.keymap.del('n', '<C-k>', { buffer = bufnr })
          -- vim.keymap.set('n', '<C-i>', api.node.show_info_popup, { buffer = bufnr })
          -- vim.keymap.set('n', '<leader>tn', require('nvim-tree.api').tree.toggle, { desc = '[T]oggle [N]vim-tree' })
        --
        --   local function opts(desc)
        --     return { desc = "nvim tree: " ..desc, buffer = bufnr, noremap = true, silent = true, nowait = true }
        --   end
        --
        --
        --   -- custom mappings
        --   vim.keymap.set('n', '<leader>tn', api.tree.toggle, opts('Toggle Directory Tree'))
        --
        -- end,
        update_focused_file = {
          enable = true,
        },
        view = {
          adaptive_size = true,
        },
      }
    end,
  },

  -- nvim surround
  {
    "kylechui/nvim-surround",
    version = "*", -- Use for stability; omit to use `main` branch for the latest features
    event = "VeryLazy", -- WHAT IS THIS FOR ?
    config = function()
      require("nvim-surround").setup({
          -- Configuration here, or leave empty to use defaults
      })
    end
  },

  -- github copilot
  {
    "github/copilot.vim",
    event = "VeryLazy",
    config = function()
      vim.g.copilot_no_tab_map = true
      vim.g.copilot_assume_mapped = true
      -- below messes up tab indentation
      -- vim.g.copilot_tab_fallback = ""

      vim.keymap.set('i', '<C-e>', [[copilot#Accept("\<CR>")]], {
        silent = true,
        expr = true,
        script = true,
        replace_keycodes = false,
      })
    end
  },

  -- swenv - show python virtual environment in lualine
  {
    "AckslD/swenv.nvim",
    lazy = true,
    config = function()
      require("swenv").setup({
        post_set_venv = function(venv)
          print("Virtual environment set to: " .. venv.name)
          vim.cmd('LspRestart')
        end,
      })
      require("lualine").setup({
        sections = {
          lualine_z = {
            "location",
            {
              "swenv",
              icon=' ',
              -- custom color not working
              use_mode_colors = true,
              on_click=require("swenv.api").pick_venv,
              cond = function()
                return vim.bo.filetype == "python"
              end,
            },
          },
        },
      })
    end
  },

  -- dressing for vim.ui selections
  {
    'stevearc/dressing.nvim',
    opts = {},
    event = "VeryLazy",
  },

  -- noice - better looking command line in neovim
  -- https://github.com/folke/noice.nvim
  {
    "folke/noice.nvim",
    event = "VeryLazy",
    opts = {
      -- add any options here
    },
    dependencies = {
      -- if you lazy-load any plugin below, make sure to add proper `module="..."` entries
      "MunifTanjim/nui.nvim",
      "hrsh7th/cmp-cmdline",
      -- OPTIONAL:
      --   `nvim-notify` is only needed, if you want to use the notification view.
      --   If not available, we use `mini` as the fallback
      "rcarriga/nvim-notify",
    },
    config = function ()
      require('noice').setup({
        lsp = {
          -- override markdown rendering so that **cmp** and other plugins use **Treesitter**
          override = {
            ["vim.lsp.util.convert_input_to_markdown_lines"] = true,
            ["vim.lsp.util.stylize_markdown"] = true,
            ["cmp.entry.get_documentation"] = true,
          },
        },
        -- you can enable a preset for easier configuration
        presets = {
          -- bottom_search = true, -- use a classic bottom cmdline for search
          command_palette = true, -- position the cmdline and popupmenu together
          -- long_message_to_split = true, -- long messages will be sent to a split
          -- inc_rename = false, -- enables an input dialog for inc-rename.nvim
          lsp_doc_border = true, -- add a border to hover docs and signature help
        },
        -- routes = {
        --   {
        --     -- show persistent macro record message
        --     -- :h ui-messages for different events
        --     -- :h noice.nvim-noice-(nice,-noise,-notice)-views for views
        --     -- view = "notify",
        --     view = "cmdline",
        --     filter = { event = "msg_showmode" },
        --   },
        -- },
        -- popupmenu = {
        --   backend = "cmp" -- use cmp to show suggestions in popupmenu
        -- }
      })
      -- show recording message in lualine instead
      require('lualine').setup({
        sections = {
          lualine_y = {
            'progress',
            {
              require('noice').api.statusline.mode.get,
              cond = require('noice').api.statusline.mode.has,
            },
          },
        },
      })
    end
  },

  -- split/condense code blocks using tree sitter
  {
    'ckolkey/ts-node-action',
    dependencies = { 'nvim-treesitter' },
    opts = {},
    lazy = true,
  },

  -- vim tmux navigator
  {
    "christoomey/vim-tmux-navigator",
    -- lazy = false,
    cmd = {
      "TmuxNavigateLeft",
      "TmuxNavigateDown",
      "TmuxNavigateUp",
      "TmuxNavigateRight",
      "TmuxNavigatePrevious",
    },
    keys = {
      { "<c-h>", "<cmd><C-U>TmuxNavigateLeft<cr>" },
      { "<c-j>", "<cmd><C-U>TmuxNavigateDown<cr>" },
      { "<c-k>", "<cmd><C-U>TmuxNavigateUp<cr>" },
      { "<c-l>", "<cmd><C-U>TmuxNavigateRight<cr>" },
      { "<c-\\>", "<cmd><C-U>TmuxNavigatePrevious<cr>" },
    },
  },

  -- undo tree
  {
    "jiaoshijie/undotree",
    dependencies = { "nvim-lua/plenary.nvim" },
    config = true,
    keys = {
      -- load the plugin only when using its keybindings
      { "<leader>u", "<cmd>lua require('undotree').toggle()<cr>", desc = "[U]ndo Tree" },
    },
  },
  
  -- autopairs
  {
    "windwp/nvim-autopairs",
    event = "InsertEnter",
    opts = {}
  },

  -- startup - for fancy screen as dashboard
  -- TODO: fix error cursor outside buffer??
  -- Error executing vim.schedule lua callback: ....local/share/nvim/lazy/startup.nvim/lua/startup/init.lua:524: Cursor position outside buffer
  -- stack traceback:
  --         [C]: in function 'nvim_win_set_cursor'
  --         ....local/share/nvim/lazy/startup.nvim/lua/startup/init.lua:524: in function ''
  --         vim/_editor.lua: in function ''
  --         vim/_editor.lua: in function <vim/_editor.lua:0>
  -- {
  --   "startup-nvim/startup.nvim",
  --   version = "*", -- Use for stability; omit to use `main` branch for the latest features
  --   lazy = false,
  --   dependencies = {
  --     "nvim-telescope/telescope.nvim",
  --     "nvim-lua/plenary.nvim",
  --   },
  --   config = function()
  --     require("startup").setup({
  --         -- Configuration here, or leave empty to use defaults
  --     })
  --   end
  -- },

-- *******************************************************

}, {})

-- [[ Setting options ]]
-- See `:help vim.o`
-- NOTE: You can change these options as you wish!

-- Set highlight on search
vim.o.hlsearch = false

-- Make line numbers default
vim.wo.number = true

-- show line indicator
-- vim.o.statuscolumn='%s%=%l %C%#Yellow#%{v:relnum == 0 ? ">" : ""}%#IndentBlankLineChar#%{v:relnum == 0 ? "" : "│"} '
vim.wo.cursorline = true

-- Enable relative line numbers
vim.wo.relativenumber = true

-- Enable mouse mode
vim.o.mouse = 'a'

-- Sync clipboard between OS and Neovim.
--  Remove this option if you want your OS clipboard to remain independent.
--  See `:help 'clipboard'`
vim.o.clipboard = 'unnamedplus'

-- Enable break indent
vim.o.breakindent = true

-- Save undo history
vim.o.undofile = true

-- Case-insensitive searching UNLESS \C or capital in search
vim.o.ignorecase = true
vim.o.smartcase = true

-- Keep signcolumn on by default
vim.wo.signcolumn = 'yes'

-- Decrease update time
vim.o.updatetime = 250
vim.o.timeoutlen = 300

-- Set completeopt to have a better completion experience
vim.o.completeopt = 'menuone,noselect'

-- NOTE: You should make sure your terminal supports this
vim.o.termguicolors = true

-- [[ Basic Keymaps ]]

-- Keymaps for better default experience
-- See `:help vim.keymap.set()`
vim.keymap.set({ 'n', 'v' }, '<Space>', '<Nop>', { silent = true })

-- Remap for dealing with word wrap
vim.keymap.set('n', 'k', "v:count == 0 ? 'gk' : 'k'", { expr = true, silent = true })
vim.keymap.set('n', 'j', "v:count == 0 ? 'gj' : 'j'", { expr = true, silent = true })

-- Diagnostic keymaps
vim.keymap.set('n', '[d', vim.diagnostic.goto_prev, { desc = 'Go to previous diagnostic message' })
vim.keymap.set('n', ']d', vim.diagnostic.goto_next, { desc = 'Go to next diagnostic message' })
vim.keymap.set('n', '<leader>e', vim.diagnostic.open_float, { desc = 'Open floating diagnostic message' })

-- [[ Highlight on yank ]]
-- See `:help vim.highlight.on_yank()`
local highlight_group = vim.api.nvim_create_augroup('YankHighlight', { clear = true })
vim.api.nvim_create_autocmd('TextYankPost', {
  callback = function()
    vim.highlight.on_yank()
  end,
  group = highlight_group,
  pattern = '*',
})

function dump(o)
   if type(o) == 'table' then
      local s = '{ '
      for k,v in pairs(o) do
         if type(k) ~= 'number' then k = '"'..k..'"' end
         s = s .. '['..k..'] = ' .. dump(v) .. ','
      end
      return s .. '} '
   else
      return tostring(o)
   end
end

-- [[ Configure Telescope ]]
-- See `:help telescope` and `:help telescope.setup()`
require('telescope').setup {
  defaults = {
    -- removing allows scrolling through preview but blocks delete search with <C-u>
    mappings = {
      i = {
        ['<C-u>'] = false,
        ['<C-d>'] = false,
      },
    },
    path_display = {
      shorten = {
        len = 1,
        exclude = { -3, -2, -1 },
      },
      truncate = true,
    },
    dynamic_preview_title = true,
    -- exluding lazygit for some reason
    -- file_ignore_patterns = { 'node_modules', '.git', '__pycache__' },
    -- sort results by line number, might cause slowness
    -- https://github.com/nvim-telescope/telescope.nvim/issues/1080
    tiebreak = function(entry1, entry2, _)
      return entry1.index < entry2.index
    end,
  },
}

-- Does not work https://www.reddit.com/r/neovim/comments/vuxr5n/telescope_previewer_of_custom_strings/
-- Update telescope preview window to show if file is dirty
-- require('telescope.previewers').new({
--   dynamic_title = function(_, entry)
--     print(vim.inspect(entry))
--     if entry.status == 'dirty' then
--       return '[+] ' .. entry.value
--     end
--     return '[ ] ' .. entry.value
--   end,
-- })

-- Enable telescope fzf native, if installed
pcall(require('telescope').load_extension, 'fzf')

-- add other extensions
-- require('telescope').load_extension('noice')

-- Telescope live_grep in git root
-- Function to find the git root directory based on the current buffer's path
local function find_git_root()
  -- Use the current buffer's path as the starting point for the git search
  local current_file = vim.api.nvim_buf_get_name(0)
  local current_dir
  local cwd = vim.fn.getcwd()
  -- If the buffer is not associated with a file, return nil
  if current_file == '' then
    current_dir = cwd
  else
    -- Extract the directory from the current file's path
    current_dir = vim.fn.fnamemodify(current_file, ':h')
  end

  -- Find the Git root directory from the current file's path
  local git_root = vim.fn.systemlist('git -C ' .. vim.fn.escape(current_dir, ' ') .. ' rev-parse --show-toplevel')[1]
  if vim.v.shell_error ~= 0 then
    print 'Not a git repository. Searching on current working directory'
    return cwd
  end
  return git_root
end

-- Custom live_grep function to search in git root
local function live_grep_git_root()
  local git_root = find_git_root()
  if git_root then
    require('telescope.builtin').live_grep {
      search_dirs = { git_root },
    }
  end
end

vim.api.nvim_create_user_command('LiveGrepGitRoot', live_grep_git_root, {})

-- See `:help telescope.builtin`
vim.keymap.set('n', '<leader>?', require('telescope.builtin').oldfiles, { desc = '[?] Find recently opened files' })
vim.keymap.set(
  'n',
  '<leader><space>',
  function()
    require('telescope.builtin').buffers({
      sort_mru = true,
      ignore_current_buffer = true,
    })
  end,
  { desc = '[ ] Find existing buffers' }
)
vim.keymap.set('n', '<leader>/', function()
  -- You can pass additional configuration to telescope to change theme, layout, etc.
  require('telescope.builtin').current_buffer_fuzzy_find(require('telescope.themes').get_dropdown {
    winblend = 10,
    previewer = false,
    prompt_title = "Search Current Buffer",
    prompt_prefix = " 󰱽  ",
  })
end, { desc = '[/] Fuzzily search in current buffer' })

local function telescope_live_grep_open_files()
  require('telescope.builtin').live_grep {
    grep_open_files = true,
    prompt_title = 'Live Grep in Open Files',
    prompt_prefix = "   ",
  }
end

local function telescope_search_project_files()
  local _, ret, stderr = vim.fn.systemlist('git rev-parse --is-inside-work-tree');
  local gopts = {}
  gopts.prompt_title = 'Search Project Files'
  gopts.prompt_prefix = "   "
  -- gopts.hidden = true
  if ret == 0 then
    require('telescope.builtin').git_files(gopts)
  else
    require('telescope.builtin').find_files(gopts)
  end
end

local function telescope_search_all_files()
  local gopts = {}
  gopts.prompt_title = 'Search All Files'
  gopts.prompt_prefix = "   "
  -- gopts.hidden = true
  -- gopts.no_ignore = true
  require('telescope.builtin').find_files(gopts)
end

vim.keymap.set('n', '<leader>s/', telescope_live_grep_open_files, { desc = '[S]earch [/] in Open Files' })
vim.keymap.set('n', '<leader>ss', require('telescope.builtin').builtin, { desc = '[S]earch [S]elect Telescope' })
vim.keymap.set('n', '<leader>gh', require('telescope.builtin').git_commits, { desc = 'Search [G]it Commit [H]istory' })
vim.keymap.set('n', '<leader>pf', telescope_search_all_files, { desc = 'Search All [P]roject [F]iles' })
vim.keymap.set('n', '<leader>sf', telescope_search_project_files, { desc = '[S]earch Project [F]iles' })
vim.keymap.set('n', '<leader>sh', require('telescope.builtin').help_tags, { desc = '[S]earch [H]elp' })
vim.keymap.set('n', '<leader>sw', require('telescope.builtin').grep_string, { desc = '[S]earch current [W]ord' })
vim.keymap.set('n', '<leader>sg', require('telescope.builtin').live_grep, { desc = '[S]earch by [G]rep' })
vim.keymap.set('n', '<leader>sG', ':LiveGrepGitRoot<cr>', { desc = '[S]earch by [G]rep on Git Root' })
vim.keymap.set('n', '<leader>sr', require('telescope.builtin').resume, { desc = '[S]earch [R]esume' })
vim.keymap.set('n', '<leader>sm', require('telescope.builtin').marks, { desc = '[S]earch [M]arks' })
vim.keymap.set('n', '<leader>sj', require('telescope.builtin').jumplist, { desc = '[S]earch [J]umplist' })
vim.keymap.set('n', '<leader>sc', require('telescope.builtin').commands, { desc = '[S]earch [C]ommands' })
vim.keymap.set('n', '<leader>sk', require('telescope.builtin').keymaps, { desc = '[S]earch [K]eymaps' })
vim.keymap.set('n', '<leader>wd', require('telescope.builtin').diagnostics, { desc = '[W]orkspace [D]iagnostics' })

-- ********************** CUSTOM *************************

-- telescope keymaps
-- 4 ways of doing the same thing
-- vim.keymap.set('n', '<leader>q', vim.diagnostic.setloclist, { desc = 'Open diagnostics list' })
-- vim.keymap.set('n', '<leader>q', "<cmd>:Telescope diagnostics<CR>", { desc = 'Open diagnostics list' })
-- vim.keymap.set('n', '<leader>q', vim.cmd.telescope.diagnostics, { desc = 'Open diagnostics list' })
-- vim.keymap.set('n', '<leader>q', require('telescope.builtin').diagnostics, { desc = 'Open diagnostics list' })

-- nvim tree keymaps, TODO: update to use common nvim-tree
-- setting in lazy config with keys
-- vim.keymap.set('n', '<leader>tn', require('nvim-tree.api').tree.toggle, { desc = '[T]oggle [N]vim-tree' })

-- set filetype for symlink files
-- doesnt work with files like zshrc.symlink - needs to have extension within filename
-- TODO: add priority and general function
-- TODO: Make it work with all plugins (nvimtree, telescope, treitter, lsp)
vim.filetype.add({
  pattern = {
    -- ['.*%.lua.symlink'] = { 'lua', { priority = 10 } },
    ['.*%.(%a+).symlink'] = function(_, _, ext)
      return ext
    end,
  }
})

-- doesnt work
-- require('nvim-web-devicons').setup {
--   override = {
--     lua = {
--       icon = '',
--       color = '#ffffff',
--       name = 'Lua',
--     },
--   },
--   override_by_extension = {
--     ['symlink'] = {
--       icon = '',
--       color = '#7ebae4',
--       name = 'Symlink',
--     },
--   },
-- }

-- code actions for splitting and condensing code blocks
vim.keymap.set('n', '<leader>cn', require('ts-node-action').node_action, { desc = '[T]rigger [N]ode Action' })

-- swenv choose conda environment
-- create mapping to choose conda environment with autocmd if filetype is python
vim.api.nvim_create_autocmd('FileType', {
  callback = function()
    if vim.bo.filetype == "python" then
      vim.keymap.set('n', '<leader>ce', require('swenv.api').pick_venv, { desc = 'Choose [C]onda [E]nvironment' })
    end
  end,
  pattern = 'python',
})

-- toggle terminal emulator

-- buffer next/previous
vim.keymap.set('n', ']b', vim.cmd.bnext, { desc = '[B]uffer Next' })
vim.keymap.set('n', '[b', vim.cmd.bprev, { desc = '[B]uffer Previous' })

-- trim whitespace
local function trim_whitespace()
  vim.cmd [[%s/\s\+$//e]]
end
vim.keymap.set('n', '<leader>tw', trim_whitespace, { desc = '[T]rim [W]hitespace' })
-- vim.api.nvim_create_autocmd({ 'BufWritePre' }, { callback = trim_whitespace })

-- *******************************************************

-- [[ Configure Treesitter ]]
-- See `:help nvim-treesitter`
-- Defer Treesitter setup after first render to improve startup time of 'nvim {filename}'
vim.defer_fn(function()
  require('nvim-treesitter.configs').setup {
    -- Add languages to be installed here that you want installed for treesitter
    ensure_installed = { 'c', 'cpp', 'go', 'lua', 'python', 'rust', 'tsx', 'javascript', 'typescript', 'vimdoc', 'vim', 'bash' },

    -- Autoinstall languages that are not installed. Defaults to false (but you can change for yourself!)
    auto_install = false,

    highlight = { enable = true },
    indent = { enable = true },
    incremental_selection = {
      enable = true,
      keymaps = {
        init_selection = '<c-space>',
        node_incremental = '<c-space>',
        scope_incremental = '<c-s>',
        node_decremental = '<M-space>',
      },
    },
    textobjects = {
      select = {
        enable = true,
        lookahead = true, -- Automatically jump forward to textobj, similar to targets.vim
        keymaps = {
          -- You can use the capture groups defined in textobjects.scm
          ['aa'] = '@parameter.outer',
          ['ia'] = '@parameter.inner',
          ['af'] = '@function.outer',
          ['if'] = '@function.inner',
          ['ac'] = '@class.outer',
          ['ic'] = '@class.inner',
        },
      },
      move = {
        enable = true,
        set_jumps = true, -- whether to set jumps in the jumplist
        goto_next_start = {
          [']m'] = '@function.outer',
          -- [']]'] = '@class.outer',
          -- [']]'] = '@parameter.inner',
          [']s'] = { query ='@scope', query_group = 'locals', desc = 'Next [S]cope' },
          [']z'] = { query ='@fold', query_group = 'locals', desc = 'Next Fold' },
        },
        goto_next_end = {
          [']M'] = '@function.outer',
          [']['] = '@class.outer',
        },
        goto_previous_start = {
          ['[m'] = '@function.outer',
          -- ['[['] = '@class.outer',
          -- ['[['] = '@parameter.inner',
        },
        goto_previous_end = {
          ['[M'] = '@function.outer',
          ['[]'] = '@class.outer',
        },
      },
      swap = {
        enable = true,
        swap_next = {
          ['<leader>a'] = '@parameter.inner',
        },
        swap_previous = {
          ['<leader>A'] = '@parameter.inner',
        },
      },
    },
  }
end, 0)

-- tree sitter keymaps (doing directly since not supported with nvim-treesitter-textobjects
vim.keymap.set("n", "]]", function()
  local t = require("nvim-treesitter.ts_utils")
  t.goto_node(t.get_next_node(t.get_node_at_cursor(), true, true), false, true)
  -- t.goto_node(t, goto_end, avoid_set_jump)
end)

vim.keymap.set("n", "[[", function()
  local t = require("nvim-treesitter.ts_utils")
  t.goto_node(t.get_previous_node(t.get_node_at_cursor(), true, true), false, true)
end)


-- [[ Configure LSP ]]
--  This function gets run when an LSP connects to a particular buffer.
local on_attach = function(_, bufnr)
  -- NOTE: Remember that lua is a real programming language, and as such it is possible
  -- to define small helper and utility functions so you don't have to repeat yourself
  -- many times.
  --
  -- In this case, we create a function that lets us more easily define mappings specific
  -- for LSP related items. It sets the mode, buffer and description for us each time.
  local nmap = function(keys, func, desc)
    if desc then
      desc = 'LSP: ' .. desc
    end

    vim.keymap.set('n', keys, func, { buffer = bufnr, desc = desc })
  end

  nmap('<leader>rn', vim.lsp.buf.rename, '[R]e[n]ame')
  nmap('<leader>ca', vim.lsp.buf.code_action, '[C]ode [A]ction')

  nmap('gd', require('telescope.builtin').lsp_definitions, '[G]oto [D]efinition')
  nmap('gr', require('telescope.builtin').lsp_references, '[G]oto [R]eferences')
  nmap('gI', require('telescope.builtin').lsp_implementations, '[G]oto [I]mplementation')
  nmap('<leader>D', require('telescope.builtin').lsp_type_definitions, 'Type [D]efinition')
  nmap('<leader>ds', require('telescope.builtin').lsp_document_symbols, '[D]ocument [S]ymbols')
  nmap('<leader>ws', require('telescope.builtin').lsp_dynamic_workspace_symbols, '[W]orkspace [S]ymbols')

  -- See `:help K` for why this keymap
  nmap('K', vim.lsp.buf.hover, 'Hover Documentation')
  nmap('<C-i>', vim.lsp.buf.signature_help, 'Signature Documentation')

  -- Lesser used LSP functionality
  nmap('gD', vim.lsp.buf.declaration, '[G]oto [D]eclaration')
  nmap('<leader>wa', vim.lsp.buf.add_workspace_folder, '[W]orkspace [A]dd Folder')
  nmap('<leader>wr', vim.lsp.buf.remove_workspace_folder, '[W]orkspace [R]emove Folder')
  nmap('<leader>wl', function()
    print(vim.inspect(vim.lsp.buf.list_workspace_folders()))
  end, '[W]orkspace [L]ist Folders')

  -- Create a command `:Format` local to the LSP buffer
  vim.api.nvim_buf_create_user_command(bufnr, 'Format', function(_)
    vim.lsp.buf.format()
  end, { desc = 'Format current buffer with LSP' })
end

-- document existing key chains
require('which-key').register {
  ['<leader>c'] = { name = '[C]ode', _ = 'which_key_ignore' },
  ['<leader>d'] = { name = '[D]ocument', _ = 'which_key_ignore' },
  ['<leader>g'] = { name = '[G]it', _ = 'which_key_ignore' },
  ['<leader>h'] = { name = 'Git [H]unk', _ = 'which_key_ignore' },
  ['<leader>r'] = { name = '[R]ename', _ = 'which_key_ignore' },
  ['<leader>s'] = { name = '[S]earch', _ = 'which_key_ignore' },
  ['<leader>t'] = { name = '[T]oggle', _ = 'which_key_ignore' },
  ['<leader>w'] = { name = '[W]orkspace', _ = 'which_key_ignore' },
}
-- register which-key VISUAL mode
-- required for visual <leader>hs (hunk stage) to work
require('which-key').register({
  ['<leader>'] = { name = 'VISUAL <leader>' },
  ['<leader>h'] = { 'Git [H]unk' },
}, { mode = 'v' })

-- mason-lspconfig requires that these setup functions are called in this order
-- before setting up the servers.
require('mason').setup()
require('mason-lspconfig').setup()

-- Enable the following language servers
--  Feel free to add/remove any LSPs that you want here. They will automatically be installed.
--
--  Add any additional override configuration in the following tables. They will be passed to
--  the `settings` field of the server config. You must look up that documentation yourself.
--
--  If you want to override the default filetypes that your language server will attach to you can
--  define the property 'filetypes' to the map in question.
local servers = {
  -- clangd = {},
  -- gopls = {},
  -- rust_analyzer = {},
  -- html = { filetypes = { 'html', 'twig', 'hbs'} },
  pyright = {
  --   settings = {
  --     python = {
  --       analysis = {
  --         autoSearchPaths = true,
  --         useLibraryCodeForTypes = true,
  --         diagnosticMode = 'workspace',
  --         typeCheckingMode = 'basic',
  --         stubPath = vim.fn.stdpath('data') .. '/stubs',
  --       },
  --     },
  --   },
  },
  -- bash_language_server = {
  --   filetypes = { 'sh', 'zsh' },
  --   settings = {
  --     bash = {
  --       excludePaths = { '/usr/*', '/nix/*' },
  --     },
  --   },
  -- },
  tsserver = {
    -- settings = {
    --   root_dir = function (fname)
    --     local util = require 'lspconfig/util'
    --     return util.root_pattern(".git")(fname)
    --       or util.root_pattern("package.json", "tsconfig.json", "jsconfig.json")(fname)
    --   end,
    -- },
  },
  lua_ls = {
    Lua = {
      runtime = {
        version = "LuaJIT",
      },
      workspace = {
        checkThirdParty = false,
        library = vim.api.nvim_get_runtime_file('', true),
      },
      telemetry = { enable = false },
      -- NOTE: toggle below to ignore Lua_LS's noisy `missing-fields` warnings
      -- diagnostics = { disable = { 'missing-fields' } },
      diagnostics = {
        globals = { 'vim' },
      },
      completion = {
        -- NOTE: toggle below to enable Lua_LS's completion
        -- callSnippet = 'Both',
        callSnippet = 'Replace',
      },
    },
  },
}

-- Setup neovim lua configuration
require('neodev').setup()

-- nvim-cmp supports additional completion capabilities, so broadcast that to servers
local capabilities = vim.lsp.protocol.make_client_capabilities()
capabilities = require('cmp_nvim_lsp').default_capabilities(capabilities)

-- Ensure the servers above are installed
local mason_lspconfig = require 'mason-lspconfig'

mason_lspconfig.setup {
  ensure_installed = vim.tbl_keys(servers),
}

mason_lspconfig.setup_handlers {
  function(server_name)
    require('lspconfig')[server_name].setup {
      capabilities = capabilities,
      on_attach = on_attach,
      settings = servers[server_name],
      filetypes = (servers[server_name] or {}).filetypes,
    }
  end,
}

-- disables diagnostic messages from showing in insert mode
-- vim.lsp.handlers['textDocument/publishDiagnostics'] = vim.lsp.with(
--   vim.lsp.diagnostic.on_publish_diagnostics, {
--     -- Disable virtual text
--     virtual_text = false,
--     update_in_insert = false,
--   }
-- )

-- [[ Configure nvim-cmp ]]
-- See `:help cmp`
local cmp = require 'cmp'
local luasnip = require 'luasnip'
require('luasnip.loaders.from_vscode').lazy_load()
luasnip.config.setup {}
vim.keymap.set({"i"}, "<C-k>", function() luasnip.expand() end, {silent = true})
vim.keymap.set({"i", "s"}, "<C-l>", function() luasnip.jump( 1) end, {silent = true})
vim.keymap.set({"i", "s"}, "<C-h>", function() luasnip.jump(-1) end, {silent = true})

vim.keymap.set({"i", "s"}, "<C-j>", function()
	if luasnip.choice_active() then
		luasnip.change_choice(1)
	end
end, {silent = true})

cmp.setup {
  snippet = {
    expand = function(args)
      luasnip.lsp_expand(args.body)
    end,
  },
  completion = {
    completeopt = 'menu,menuone,noinsert',
  },
  formatting = {
    fields = { "kind", "abbr", "menu" },
    window = {
      completion = {
        winhighlight = "Normal:Pmenu,FloatBorder:Pmenu,Search:None",
        col_offset = -3,
        side_padding = 0,
      },
    },
    format = function (entry, vim_item)
      local menu
      local kind = require("lspkind").symbol_map[vim_item.kind]

      local alias = {
        buffer = "[B]",
        nvim_lsp = "[LSP]",
        nvim_lua = "[Lua]",
        luasnip = "[LS]",
        path = "[P]",
        nvim_lsp_signature = "[Sig]",
      }

      if entry.source.name == "nvim_lsp" then
        menu = entry.source.source.client.name
      else
        menu = alias[entry.source.name] or entry.source.name
      end

      -- vim_item.menu = vim_item.kind
      vim_item.menu = menu
      vim_item.kind = kind
      return vim_item
    end
  },
  mapping = cmp.mapping.preset.insert {
    ['<C-n>'] = cmp.mapping.select_next_item(),
    ['<C-p>'] = cmp.mapping.select_prev_item(),
    ['<C-u>'] = cmp.mapping.scroll_docs(-4),
    ['<C-d>'] = cmp.mapping.scroll_docs(4),
    ['<C-Space>'] = cmp.mapping.complete {},
    ['<CR>'] = cmp.mapping.confirm {
      behavior = cmp.ConfirmBehavior.Replace,
      select = true,
    },
    -- disable to seamlessley use copilot
    -- ['<Tab>'] = cmp.mapping(function(fallback)
    --   if cmp.visible() then
    --     cmp.select_next_item()
    --   elseif luasnip.expand_or_locally_jumpable() then
    --     luasnip.expand_or_jump()
    --   else
    --     fallback()
    --   end
    -- end, { 'i', 's' }),
    -- ['<S-Tab>'] = cmp.mapping(function(fallback)
    --   if cmp.visible() then
    --     cmp.select_prev_item()
    --   elseif luasnip.locally_jumpable(-1) then
    --     luasnip.jump(-1)
    --   else
    --     fallback()
    --   end
    -- end, { 'i', 's' }),
  },
  -- order defines ranking
  sources = {
    { name = 'lua_ls' },
    { name = 'tsserver' },
    { name = 'pyright' },
    -- { name = 'gopls', keyword_length = 3 },
    -- { name = 'nvim_lua' },
    {
      name = 'nvim_lsp',
      -- TODO: not working need to map kind to lsp item kind
      entry_filter = function(entry, ctx)
        local kind = entry:get_kind()
        if kind == "Text" then return false end
        return true
      end
    },
    { name = 'path' },
    { name = 'luasnip' },
    -- { name = 'buffer', keyword_length = 5 },
  },
  -- formatting = {
  --   format = require('lspkind').cmp_format({
  --     mode = 'symbol',
  --     maxwidth = 50,
  --     ellipsis_cahr = '…',
  --     show_labelDetails = true,
  --     before = function(entry, vim_item)
  --       return vim_item
  --     end
  --   }),
  -- },
  -- not required for copilot, on by default
  -- experimental = {
  --   ghost_text = true,
  -- }
}


cmp.setup.cmdline('/', {
  mapping = cmp.mapping.preset.cmdline(),
  sources = {
    { name = 'buffer' },
  },
})
cmp.setup.cmdline(':', {
  mapping = cmp.mapping.preset.cmdline(),
  sources = cmp.config.sources({
    { name = 'path' },
  },
    {
      {
        name = 'cmdline',
        option = {
          ignore_cmds = { 'Man', '!' }
        }
      },
    })
})

require('nvim-autopairs').setup({
  -- enable_check_bracket_line = true,
  fast_wrap = {},
})

-- vim sleuth set tabstops for different filetypes
-- autocmd BufEnter *.py :setlocal tabstop=4 shiftwidth=4 expandtab
-- autocmd BufEnter *.py :setlocal tabstop=4 shiftwidth=4 expandtab
local function setIndentation(filetype, width)
  vim.api.nvim_create_autocmd({ 'FileType' }, {
    callback = function()
      if vim.bo.filetype == filetype then
        vim.bo.tabstop = width
        vim.bo.softtabstop = width
        vim.bo.shiftwidth = width
        vim.bo.expandtab = true
      end
    end,
    pattern = filetype,
  })
end

setIndentation('python', 4)
setIndentation('lua', 2)
setIndentation('go', 4)

-- mappings for insert mode go to start of line and end of line
vim.keymap.set('i', '<C-a>', '<C-o>^', { silent = true })
vim.keymap.set('i', '<C-s>', '<C-o>$', { silent = true })
vim.keymap.set('i', '<C-z>', '<C-o>O', { silent = true })

-- The line beneath this is called `modeline`. See `:help modeline`
-- vim: ts=2 sts=2 sw=2 et
-- https://www.reddit.com/r/neovim/comments/chlmfk/highlight_trailing_whitespaces_in_neovim/
-- listchars=eol:↵,trail:~,tab:>-,nbsp:␣
